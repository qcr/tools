#!/usr/bin/env bash
#
# A set of common variables and functions.
#
# Author: James Mount
# Version: 0.2.0


#################
### VARIABLES ###
#################

# The location of the tools directory
# TOOLS_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Number of minutes to wait until checking for update
UPDATE_AFTER_N_MINS=1440

# Screen Reset
RESET='\033[0m'

# Screen Colors
BLACK="\033[0;30m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"

# Screen helpers
INFO="${GREEN}[INFO]${RESET} "
WARN="${YELLOW}[WARN]${RESET} "
ERROR="${RED}[ERROR]${RESET} "


#################
### FUNCTIONS ###
#################

function git_command_exists(){
    # Bail if git isn't found
    command -v git >& /dev/null || {
        printf "${ERROR}the 'git' command was not found, please install\n"
        exit 1
    }
}

function install_tool(){
    # Installs (git clones) the tools to a specified location, 
    # if the tool is not already installed. Will terminate
    # the program if failed to install.
    #
    # Usage:
    #   install_tool <REPO_CLONE_URL> <INSTALL_DIR> <TOOLNAME>

    repo_clone_url=$1
    install_dir=$2
    tool_name=$3

    # Clone repo if doesn't exist
    if [ ! -d "$install_dir" ]; then
        printf "\n${INFO} No cached version of the '${tool_name}' tool found. Installing to '$install_dir'...\n"
        mkdir -p "${install_dir}"
        if ! git clone --recurse-submodules "$repo_clone_url" "$install_dir"; then
            printf "${ERROR} Install failed, please ensure machine has Internet access, a valid SSH Key is present (if required), and correct access rights to the repository.\n"
            rm -rf "${install_dir}"
            exit 1
        fi
    fi
    printf "\n"
}

function check_cloned_repo_is_latest(){
    # Check to see if a cloned repo is the latest. Will
    # print a warning if unable to check and state using the
    # cached version. Will tell the user to run an update if
    # using an outdated version. 
    # 
    # Returns:
    #       0 - if repo is latest
    #       1 - if repo is outdated
    #       2 - if failed to perform checck
    #
    # Usage:
    #   check_cloned_repo_is_latest <REPO_DIR> <TOOL_NAME>
    #   retval=$?

    REPO_DIR=$1
    TOOL_NAME=$2

    # Check whether installed version is the latest (flagging if there are updates
    # available, or update check failed)
    latest="$(git -C "${REPO_DIR}" ls-remote 2>/dev/null | grep HEAD | cut -f 1 || true)"
    installed="$(git -C "$REPO_DIR" rev-parse HEAD)"
    if [ -z "$latest" ]; then
        printf "${WARN}check for latest tools failed; using cached version in '$REPO_DIR'.\n"
        return 1
    elif [ "$latest" != "$installed" ]; then
        printf "\n${WARN}${YELLOW}Old version (${installed:0:8}) found in '$REPO_DIR'.\n"
        printf "\tUpdate to latest (${latest:0:8}) using: qcr update ${TOOL_NAME}${RESET}"
        # printf " (not yet implemented, instead run 'rm -rf ${REPO_DIR}' and re-run)"
        printf "${RESET}\n\n"
        return 2
    fi

    return 0
}


function check_for_github_ssh_access() {
    # Attempt to SSH to GitHub
    ssh -T git@github.com &>/dev/null
    RET=$?
    if [ $RET == 1 ]; then
        # user is authenticated, but fails to open a shell with GitHub
        printf "${INFO}User authenticated with GitHub via SSH\n"
        return 0
    elif [ $RET == 255 ]; then
        # user is not authenticated
        printf "${ERROR}Unable to authenticate with GitHub via SSH\n"
        exit 1
    else
        printf "${ERROR}Unknown exit code in attempt to ssh into git@github.com\n"
        exit 2
    fi
}


function display_heading() {
    # Prints a heading to the screen
    #
    # Usage:
    #   display_heading "<HEADING TEXT>"

    # $1 heading text
    char="-"
    text=" ${1:-} "
    (( left_pad=(80 - ${#text})/2 ))
    (( right_pad=(81 - ${#text})/2 ))
    printf "${GREEN}"
    printf "\n"; printf "%.0s$char" {1..80}; printf "\n"
    printf "%.0s$char" $(seq 1 $left_pad)
    printf "${WHITE}$text${GREEN}"
    printf "%.0s$char" $(seq 1 $right_pad)
    printf "\n"; printf "%.0s$char" {1..80}; printf "\n"
    printf "${RESET}"
}


function should_check_for_update() {
    # Determines to see if a check for
    # an updated version of the tool is 
    # required based on modification dates
    # of files. Returns "1" if the tool
    # should check for updates, 0 otherwise
    #
    # Usage:
    #   should_check_for_update <DIR> <EXCLUDE_PATH>

    tmp=$(find $1 -mmin -${UPDATE_AFTER_N_MINS} -not -path "$2")
    if [[ -z ${tmp} ]]; then
        echo "1"
    else
        echo "0"
    fi
}