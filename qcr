#!/usr/bin/env bash
#
# This is the main script where all of the "work" happens. It can be used
# directly in a normal workflow (e.g. symlink into ~/bin, or add to $PATH,
# etc). 
# 
# This is also invoked by the `qcr_standalone` wrapping script.
#
# Author: B. Talbot
# Version: 0.7.0

set -uo pipefail

#################
### VARIABLES ###
#################


# The name of this script, and the directory where it is located
SCRIPT_NAME="$(basename $(readlink -f $0))"
QCR_SCRIPT_DIR="$(dirname $(readlink -f $0))"



#################
### FUNCTIONS ###
#################

print_usage() {
  printf "The QCR Script - access to all our shared tools

Usage:
  qcr [-c|--use-cached] [-f|--force-update-check] [-h|--help] [-l|--list] [-T|--tool-dir <directory>] <tools> <sub-command> <arguments>

Arguments:
  -c|--use-cached         ignore checking for updates, use the cached version of qcr and tools
  -f|--force-update-check force checking of an update
  -h|--help               show this help menu
  -l|--list               list available commands
  -T|--tool-dir           used for local dev and testing. Specify the directory of the tool. Must start with '/' or '~/'

Examples:
  Print the list of available tools: qcr -l
  Print the services tool help menu: qcr services -h

Further Details:

    Please open an issue in the QCR tools repository for questions, support, or
    to report bugs: https://github.com/qcr/tools/issues
  
"

  exit 0
}

list_tools(){
  tools="$(get_tools)"
  printf "Available Tools:\n"
  printf '%s\n' "${tools[@]}" | sed 's/^/\t/' | sort

  exit 0
}

get_tools(){
  scripts_dir=${QCR_SCRIPT_DIR}/scripts
  tools="$(find "$scripts_dir" -executable -type f | sed "s|^$scripts_dir/||; s|/| |g; s/ \.command$//")"

  echo "${tools[@]}"

}


############
### MAIN ###
############

# Source common
source ${QCR_SCRIPT_DIR}/common

# Display heading
display_heading "QCR TOOLS"

# Bail if git isn't found
git_command_exists

# Split args into what is parsed here, and what goes to a subcommand
sub_index=$(printf '%s\n' "$@" | grep -n '^[a-zA-Z]' | head -n 1 | cut -f1 -d: || echo "$(($#+1))")
main_args=( "${@:1:$((sub_index-1))}")
sub=( "${@:$sub_index}" )

# echo "Main Args: ${main_args[@]}"
# echo "Sub Args: ${sub[@]}"

# Process main arguments using getopt command, oif there are any
FORCE_UPDATE_CHECK=false
USE_CACHED=false
TOOL_DIR=false
if [ ! ${#main_args[@]} -eq 0 ]; then
  PARSED_ARGS=$(getopt -a -q -n ${SCRIPT_NAME} -o 'cfhlT:' --long 'use-cached,help,list,tool-dir:,force-update-check' -- "${main_args[@]}")
  eval set -- "${PARSED_ARGS}"
  while true; do
    case "$1" in 
      -h|--help) 
        print_usage; ;;
      -l|--list)
        list_tools; ;;
      -c|--use-cached)
        USE_CACHED=true; shift ;;
      -f|--force-update-check)
        FORCE_UPDATE_CHECK=true; shift ;;
      -T|--tool-dir)
        TOOL_DIR=$2; shift 2 ;;
      # -- indicates end of arguments, break while loop
      --) shift; break ;;
      # invalid option was passed, print usage
      *)
        printf "${ERROR}Unrecognized option '$1'\n" 
        print_usage 
        exit 1 ;;    
    esac
  done
fi

# Using cached version or not
if [ $USE_CACHED == false ]; then
  # Check for update if required
  tmp=$(should_check_for_update ${QCR_SCRIPT_DIR} "*/installed-tools")
  if [ "$tmp" == "1" ] || [ ${FORCE_UPDATE_CHECK} == true ]; then
    printf "${INFO}Checking for update to tool '${YELLOW}qcr${RESET}'\n"
    check_cloned_repo_is_latest ${QCR_SCRIPT_DIR} ""
  fi

else
  printf "${INFO}Using cached tool versions.\n"
fi


# Divert to selected tool
tools_dir="${QCR_SCRIPT_DIR}/scripts"
cmds="$(find "$tools_dir" -executable -type f | sed "s|^$tools_dir/||; s|/| |g; s/ \.command$//")"
cmd="$(echo "$cmds" | while read c; do \
  [[ "${sub[@]}" == "$c "* ]] || [[ "${sub[@]}" == "$c" ]] && \
    echo "$c" || true; done | \
  awk '{ print NF, $0 }' | sort -n | cut -d' ' -f 2- | tail -n 1)"

if [ -z "$cmd" ]; then
  if [ ${#sub[@]} -gt 0 ]; then
    printf "\n${ERROR}No command matched '%s'.\n\n" "$(echo "${sub[@]}")"
  fi
  printf "\nPlease select from the following tools. "
  list_tools
  exit 1
fi


# Get the tool to run, and its arguments
if [ ! ${TOOL_DIR} == false  ]; then
  if [ ! -d ${TOOL_DIR} ]; then
    printf "${ERROR}the tool directory ${TOOL_DIR} does not exist.\n"
    exit 1
  fi
  tool="${TOOL_DIR}/$(echo "$cmd" | sed 's/ /\//g')"
else
  tool="$tools_dir/$(echo "$cmd" | sed 's/ /\//g')"
  [ -d "$tool" ] && tool="$tool/.command"
fi

tool_args=( "${sub[@]:$(echo "$cmd" | wc -w)}" )

# Print the command being run and the arguments
printf "\n${INFO}Calling '${YELLOW}$tool${RESET}'"
if [ ! ${#tool_args[@]} -eq 0 ]; then
  printf " with args '${YELLOW}${tool_args[*]}${RESET}'"
fi

# Either execute the script contained in scripts/<tool> passing
# in USE_CACHED and the tool arguments. Or attempt to run
# the script given the TOOL_DIR and the tool arguments.
if [ ${TOOL_DIR} == false  ]; then
  $tool ${USE_CACHED} ${FORCE_UPDATE_CHECK} "${tool_args[@]}" # aim of this is to run the "installed" version

  # Form of command above is 
  #   <TOOL_SCRIPT> <USE_CACHED> <FORCE_UPDATE_CHECK> <TOOL ARGUMENTS>
  #   
  #   where <TOOL_SCRIPT> is the script being called in 
  #   qcr/scripts/<tool> and not the tool's standalone
  #   script.

else
  printf "\n"
  $tool "${tool_args[@]}"               # aim of this is to run a local/developer version of a tool

  # Form of command above is 
  #   <TOOL_SCRIPT> <TOOL ARGUMENTS>
  #   
  #   where <TOOL_SCRIPT> is the actual tool
  #   script wanting to be run, not the entry script
  #   stored in qcr/scripts/<tool>.
fi
